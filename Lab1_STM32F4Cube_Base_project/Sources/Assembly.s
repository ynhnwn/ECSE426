		AREA kalman, CODE, READONLY
		EXPORT kalmanfilterasm

kalmanfilterasm 

;POINTER TO THE INPUT DATA ARRAY 							-> R0
;POINTER TO THE FILTERED DATA ARRAT 					-> R1
;ARRAYS LENGTH 																-> R2
;POINTER TO THE KALMAN FILTER STATE (STRUCT)	-> R3
;LOOP COUNTER 																-> R4

		PUSH	{R4-R12}
		MOV		R4, #0	

INITIAL
		ADD 			R5, R3,	#0				;SET ADRESS x
		VLDR.F32	S0, [R5]					;SET INITIAL CONDITION x
		ADD 			R5, R3, #16				;SET ADRESS p
		VLDR.F32	S1, [R5]					;SET INITIAL CONDITION p
		ADD 			R5, R3, #4				;SET ADRESS k
		VLDR.F32	S2, [R5]					;SET INITIAL CONDITION k
		ADD 			R5, R3,	#8				;SET ADRESS q
		VLDR.F32	S4, [R5]					;SET INITIAL CONDITION q
		ADD 			R5, R3,	#12				;SET ADRESS r
		VLDR.F32	S5, [R5]					;SET INITIAL CONDITION r
		ADD 			R5, R3,	#20				;SET ADRESS	f
		VLDR.F32	S6, [R5]					;SET INITIAL CONDITION f
		ADD 			R5, R3,	#24				;SET ADRESS h
		VLDR.F32	S7, [R5]					;SET INITIAL CONDITION h
		VLDR.F32	S8, =1.0					;STORING CONSTANT 1

INPUT
		ADD R5, R0, R4, LSL #2
		VLDR.F32	S3, [R5]					;LOADING INPUT ARRAY

PREDICTION
		VMUL.F32	S0, S0, S6				;x = fx
		VMUL.F32	S10, S6, S6				;f^2
		VMUL.F32	S11, S1, S10			;p*f^2
		VADD.F32	S1, S11, S4				;NEW pK|K-1

UPDATE
		VMUL.F32	S9, S1, S7				;ph
		VMUL.F32	S10, S9, S7				;ph^2
		VADD.F32	S11, S10, S5			;ph^2+r
		VDIV.F32	S2, S9, S11				;NEW k
		
		VNMUL.F32	S9, S2, S7				;-k_old*h
		VADD.F32	S10, S8, S9				;1-kh
		VMUL.F32	S1, S1, S10				;NEW pK|K
		
		VNMUL.F32	S9, S7, S0				;-hx
		VADD.F32	S10, S3, S9				;z-hx
		VMUL.F32	S11, S2, S10			;k_OLD(z-hx)
		VADD.F32	S0, S0, S11				;NEW xK|K
		;VMOV.F32	S2, S12						;MOVE NEW k TO OLD k

OUPUT
		ADD R5, R1, R4, LSL #2
		VSTR.f32 S0, [R5]						;UNLOADING OUTPUT ARRAY
		
		ADDS R4, R4, #1
		CMP R4, R2
		BLT INPUT
		
		POP {R4-R12}
		BX LR

		END